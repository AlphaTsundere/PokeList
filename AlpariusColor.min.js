(function (h) {
  'use strict';
  h = (h || '').toLowerCase();
  if (h !== 'pokemon-alparius.foroactivo.com' && h !== 'www.pokemon-alparius.foroactivo.com') return;

  try {
/* =========================
   Panel de tema (Light/Dark)
   ========================= */
(function(){
  // ---- Prefijo único ----
  const PX        = 'apc-';                    // Alparius Color
  const BTN_ID    = PX + 'btn';
  const PANEL_ID  = PX + 'panel';
  const STYLE_ID  = PX + 'css';
  const LS_LIGHT  = PX + 'Light';
  const LS_DARK   = PX + 'Dark';

  let didInitialApply = false;
  let saveTimer = null;
  let moTimer   = null;

  // Etiquetas legibles
  const VAR_LABELS = {
    '--light-grad-stop1': 'Gradiente inicio',
    '--light-grad-stop2': 'Gradiente medio',
    '--light-grad-stop3': 'Gradiente final',
    '--light-post-color1': 'Font post',
    '--light-indice-color': 'Fondo transparente indice 1',
    '--light-indice-transparente': 'Fondo transparente indice 2',
    '--light-uno-color': 'Color primario',
    '--light-dos-color': 'Color secundario',
    '--light-tres-color': 'Fondo',
    '--light-cuatro-color': 'Transparencia',
    '--light-cinco-color': 'Texto',
    '--light-seis-color': 'Links 1',
    '--light-siete-color': 'Fondo transparente anuncios',
    '--light-ocho-color': 'Links 2',
    '--light-nueve-color': 'Fondo posts',
    '--dark-grad-stop1': 'Gradiente inicio',
    '--dark-grad-stop2': 'Gradiente medio',
    '--dark-grad-stop3': 'Gradiente final',
    '--dark-post-color1': 'Font post',
    '--dark-indice-color': 'Fondo transparente indice 1',
    '--dark-indice-tinte': 'Color transparente imagenes',
    '--dark-uno-color': 'Color primario',
    '--dark-dos-color': 'Color secundario',
    '--dark-tres-color': 'Fondo',
    '--dark-cuatro-color': 'Transparencia',
    '--dark-cinco-color': 'Texto',
    '--dark-seis-color': 'Links 1',
    '--dark-siete-color': 'Fondo transparente anuncios',
    '--dark-ocho-color': 'Fondo posts',
  };

  const VARS_LIGHT = [
    '--light-grad-stop1','--light-grad-stop2','--light-grad-stop3','--light-post-color1',
    '--light-indice-color','--light-indice-transparente','--light-uno-color','--light-dos-color',
    '--light-tres-color','--light-cuatro-color','--light-cinco-color','--light-seis-color',
    '--light-siete-color','--light-ocho-color','--light-nueve-color'
  ];
  const VARS_DARK = [
    '--dark-grad-stop1','--dark-grad-stop2','--dark-grad-stop3','--dark-post-color1',
    '--dark-indice-color','--dark-indice-tinte','--dark-uno-color','--dark-dos-color',
    '--dark-tres-color','--dark-cuatro-color','--dark-cinco-color','--dark-seis-color',
    '--dark-siete-color','--dark-ocho-color'
  ];

  // Utils
  const $r = () => document.documentElement;
  const getVar = v => getComputedStyle($r()).getPropertyValue(v).trim();
  const setVar = (v,val) => $r().style.setProperty(v, val);
  const save = (k, arr) => localStorage.setItem(k, JSON.stringify(arr));
  const load = k => { try { return JSON.parse(localStorage.getItem(k)||'[]'); } catch { return []; } };
  const apply = (vars, values) => vars.forEach((v,i)=> values[i] && setVar(v, values[i]));

  // CSS
  const CSS = `
    #${BTN_ID} {
      position: fixed; left: 14px; bottom: 14px; z-index: 9999;
      padding: 8px 10px; border-radius: 10px; border: 1px solid #00000033;
      cursor: pointer; font: 600 13px system-ui; box-shadow: 0 6px 24px rgba(0,0,0,.35);
      background:#1d1d1d; color:#fff;
    }
    #${PANEL_ID} {
      position: fixed; left: 14px; bottom: 56px; z-index: 9999; width: 320px; max-height: 65vh;
      overflow:auto; padding: 10px; border: 1px solid #00000044;
      border-radius: 12px; box-shadow: 0 20px 48px rgba(0,0,0,.45); display:none;
    }
    .${PX}row { display:flex; align-items:center; gap:8px; margin:6px 0; }
    .${PX}row label { flex: 1 1 auto; font-size: 12px; opacity:.9; }
    .${PX}row input[type="color"] { width: 36px; height: 26px; padding:0; border:none; background:transparent; }
    .${PX}head { display:flex; justify-content:space-between; align-items:center; margin-bottom:6px; }
    .${PX}actions { display:flex; gap:6px; }
    .${PX}btn { padding:4px 8px; font: 600 12px system-ui; border-radius:8px; border:1px solid #00000033; background:#1d1d1d; color:#fff; cursor:pointer; }
    details.${PX}acc { border:1px solid #ffffff10; border-radius:10px; margin:8px 0; }
    details.${PX}acc > summary { list-style:none; cursor:pointer; padding:8px 10px; font:600 13px system-ui; }
    details.${PX}acc[open] > summary { background:#ffffff08; border-bottom:1px solid #ffffff10; border-top-left-radius:10px; border-top-right-radius:10px; }
    .${PX}acc .${PX}body { padding:8px 10px; }
    .${PX}row input[type="range"]{ accent-color:#888; }
  `;
  function ensureCss(){
    if (!document.getElementById(STYLE_ID)){
      const st = document.createElement('style');
      st.id = STYLE_ID;
      st.textContent = CSS;
      document.head.appendChild(st);
    }
  }

  function getCurrentTheme(){
    const dt = document.body && document.body.getAttribute('data-theme');
    if (dt === 'light' || dt === 'dark') return dt;
    return (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? 'dark' : 'light';
  }
  function syncAccordionByTheme(panel){
    const t = getCurrentTheme();
    const accLight = panel.querySelector('.js-acc-light');
    const accDark  = panel.querySelector('.js-acc-dark');
    if (!accLight || !accDark) return;
    accLight.open = (t === 'light');
    accDark.open  = (t === 'dark');
  }

  // Color helpers
  const clamp01 = x => Math.max(0, Math.min(1, x));
  const hex     = n => n.toString(16).padStart(2,'0');
  const rgbToHex6 = (r,g,b) => '#' + [r,g,b].map(v=>hex(v)).join('');
  const hex6ToHex8 = (hex6, a) => hex6 + hex(Math.round(clamp01(a)*255));
  const expand3 = h => '#'+h[1]+h[1]+h[2]+h[2]+h[3]+h[3];
  function parseColor(val){
    const v = (val||'').trim();
    let m = v.match(/^#([0-9a-fA-F]{8})$/);
    if (m){ const aa = m[1].slice(6,8); return { hex6:'#'+m[1].slice(0,6), a: parseInt(aa,16)/255 }; }
    m = v.match(/^#([0-9a-fA-F]{3})$/); if (m) return { hex6: expand3('#'+m[1]), a: 1 };
    m = v.match(/^#([0-9a-fA-F]{6})$/); if (m) return { hex6:'#'+m[1], a: 1 };
    m = v.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([0-9.]+))?\)$/i);
    if (m){ const [r,g,b] = m.slice(1,4).map(Number); const a = m[4]!==undefined?parseFloat(m[4]):1; return { hex6: rgbToHex6(r,g,b), a: clamp01(a) }; }
    return { hex6:'#000000', a:1 };
  }

  function makeRow(vname){
    const row = document.createElement('div'); row.className = PX+'row';
    const lab = document.createElement('label'); lab.textContent = VAR_LABELS[vname] || vname;
    const { hex6, a } = parseColor(getVar(vname));
    const inp = document.createElement('input'); inp.type='color'; inp.value=hex6;

    const aWrap  = document.createElement('div'); aWrap.style.display='flex'; aWrap.style.alignItems='center'; aWrap.style.gap='6px';
    const aRange = document.createElement('input'); aRange.type='range'; aRange.min='0'; aRange.max='100'; aRange.value = String(Math.round(a*100)); aRange.style.flex='0 0 90px';
    const aVal   = document.createElement('span'); aVal.style.fontSize='11px'; aVal.style.opacity='.8'; aVal.textContent=aRange.value+'%';

    function updateVar(){
      const alpha = Number(aRange.value)/100;
      const hex8 = hex6ToHex8(inp.value, alpha);
      setVar(vname, hex8);
      scheduleSave();
    }
    inp.addEventListener('input', updateVar);
    inp.addEventListener('change', updateVar);
    aRange.addEventListener('input', ()=>{ aVal.textContent = aRange.value + '%'; updateVar(); });

    aWrap.append(aRange, aVal);
    row.append(lab, inp, aWrap);
    row.title = vname;
    return row;
  }

  function scheduleSave(){ clearTimeout(saveTimer); saveTimer = setTimeout(doSave, 80); }
  function doSave(){
    const lightVals = VARS_LIGHT.map(v=>getVar(v) || '');
    const darkVals  = VARS_DARK.map(v=>getVar(v) || '');
    save(LS_LIGHT, lightVals);
    save(LS_DARK,  darkVals);
  }
  function resetScheme(varsKey, varsList){
    localStorage.removeItem(varsKey);
    varsList.forEach(v=> $r().style.removeProperty(v));
    doSave();
  }

  // Export / Import
  const snapshotVars = () => {
    const kv={}; [...VARS_LIGHT,...VARS_DARK].forEach(v=>{ kv[v]=getVar(v)||''; }); return kv;
  };
  function applyVarsObject(obj){
    if (!obj || typeof obj!=='object') return;
    Object.entries(obj).forEach(([k,val])=>{ if (typeof val === 'string') setVar(k,val); });
    save(LS_LIGHT, VARS_LIGHT.map(v=> getVar(v)||'' ));
    save(LS_DARK,  VARS_DARK .map(v=> getVar(v)||'' ));
  }
  function exportColors(){
    const payload = { schema: PX+'v1', createdAt:new Date().toISOString(), values:snapshotVars() };
    const blob = new Blob([JSON.stringify(payload, null, 2)], { type:'application/json' });
    const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'colores-foro.json';
    document.body.appendChild(a); a.click(); setTimeout(()=>{ URL.revokeObjectURL(a.href); a.remove(); }, 0);
  }
  function importColorsFromFile(file){
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      try { const data = JSON.parse(String(reader.result||'{}')); applyVarsObject(data.values || data); }
      catch(e){ console.error('JSON inválido al importar colores', e); alert('No se pudo importar: JSON inválido.'); }
    };
    reader.readAsText(file);
  }


  (function () {
  const msg = "SPAlJan – NoC";
  if (typeof console !== 'undefined') console.log("%c" + msg, "color:green;font-size:13px;");
})();

  
  // ---- UI ----
  function buildPanel(){
    const panel = document.createElement('div');
    panel.id = PANEL_ID;
    panel.innerHTML = `
      <div class="${PX}head">
        <div style="font:700 13px system-ui">Personalizar colores</div>
        <div class="${PX}actions">
          <button class="${PX}btn js-export" title="Exportar colores">Exportar</button>
          <button class="${PX}btn js-import" title="Importar colores">Importar</button>
          <input type="file" accept="application/json" class="${PX}file" style="display:none" />
          <button class="${PX}btn js-reset-light" title="Reset light">Reset light</button>
          <button class="${PX}btn js-reset-dark"  title="Reset dark">Reset dark</button>
        </div>
      </div>

      <details class="${PX}acc js-acc-light">
        <summary><i class="fa-solid fa-sun"></i> Cambiar colores light</summary>
        <div class="${PX}body js-light"></div>
      </details>

      <details class="${PX}acc js-acc-dark">
  <summary><i class="fa-solid fa-moon"></i> Cambiar colores dark</summary>
  <div class="${PX}body js-dark"></div>
      </details>
    `;

    const fileInput = panel.querySelector('.'+PX+'file');
    panel.querySelector('.js-export').addEventListener('click', exportColors);
    panel.querySelector('.js-import').addEventListener('click', ()=> fileInput.click());
    fileInput.addEventListener('change', (e)=>{ const f = e.target.files && e.target.files[0]; importColorsFromFile(f); e.target.value=''; });

    const lightBox = panel.querySelector('.js-light');
    const darkBox  = panel.querySelector('.js-dark');
    VARS_LIGHT.forEach(v=> lightBox.appendChild(makeRow(v)));
    VARS_DARK.forEach(v=> darkBox.appendChild(makeRow(v)));

    panel.querySelector('.js-reset-light').addEventListener('click', ()=> resetScheme(LS_LIGHT, VARS_LIGHT));
    panel.querySelector('.js-reset-dark' ).addEventListener('click', ()=> resetScheme(LS_DARK,  VARS_DARK));

    syncAccordionByTheme(panel);
    return panel;
  }

  // Solo limpia UIs propias anteriores (NO toca .theme-toggle del foro)
  function killOldUI(){
    ['ft-toggle','#ft-toggle','.ft-btn','.ftn-btnth','#ft-panel-v2','.ft-panel','#ft-css','#apc-btn','#apc-panel','#apc-css']
      .forEach(sel => document.querySelectorAll(sel).forEach(el=> el.remove()));
  }

  function mount(){
    ensureCss();
    killOldUI();

    if (!didInitialApply){
      const light = load(LS_LIGHT);
      const dark  = load(LS_DARK);
      if (light.length) apply(VARS_LIGHT, light);
      if (dark.length)  apply(VARS_DARK,  dark);
      didInitialApply = true;
    }

    // Botón único
    let btn = document.getElementById(BTN_ID);
    if (!btn){
      btn = document.createElement('button');
      btn.id = BTN_ID;
      btn.textContent = 'Colores';
      document.body.appendChild(btn);
    }

    // Panel único
    let panel = document.getElementById(PANEL_ID);
    if (!panel){
      panel = buildPanel();
      document.body.appendChild(panel);
    }

    btn.onclick = () => {
      const p = document.getElementById(PANEL_ID);
      if (p) syncAccordionByTheme(p);
      const isHidden = p.style.display==='none' || !p.style.display;
      p.style.display = isHidden ? 'block' : 'none';
    };
  }

  function boot(){ mount(); }
  if (document.readyState==='loading') document.addEventListener('DOMContentLoaded', boot); else boot();

  // Rehidratación por mutaciones
  const mo = new MutationObserver(()=>{
    if (moTimer) cancelAnimationFrame(moTimer);
    moTimer = requestAnimationFrame(()=>{
      mount();
      const p = document.getElementById(PANEL_ID);
      if (p) syncAccordionByTheme(p);
    });
  });
  mo.observe(document.documentElement, { childList:true, subtree:true });

  // Observa data-theme en body
  function observeBodyTheme(){
    const b = document.body;
    if (!b) return;
    mo.observe(b, { attributes:true, attributeFilter:['data-theme'] });
  }
  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', observeBodyTheme, { once:true });
  else observeBodyTheme();
})();
  } catch(e) { /* silencioso en producción */ }
})(location.hostname);
